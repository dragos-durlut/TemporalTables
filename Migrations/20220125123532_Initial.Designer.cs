// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrations
{
    [DbContext(typeof(OrdersContext))]
    [Migration("20220125123532_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    /*b.Property<DateTime>("ToSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate1");*/

                    b.Property<DateTime>("ToSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate");

                    /*b.Property<DateTime>("FromSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate1");*/

                    b.Property<DateTime>("FromSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("FromSysDateShadow")
                                .HasColumnName("FromSysDate");
                            ttb
                                .HasPeriodEnd("ToSysDateShadow")
                                .HasColumnName("ToSysDate");
                        }
                    ));
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

/*                    b.Property<DateTime>("ToSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate1");*/

                    b.Property<DateTime>("ToSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate");

                    /*b.Property<DateTime>("FromSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate1");*/

                    b.Property<DateTime>("FromSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("FromSysDateShadow")
                                .HasColumnName("FromSysDate");
                            ttb
                                .HasPeriodEnd("ToSysDateShadow")
                                .HasColumnName("ToSysDate");
                        }
                    ));
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    /*b.Property<DateTime>("ToSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate1");*/

                    b.Property<DateTime>("ToSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ToSysDate");

                    /*b.Property<DateTime>("FromSysDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate1");*/

                    b.Property<DateTime>("FromSysDateShadow")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("FromSysDate");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(12);

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("FromSysDateShadow")
                                .HasColumnName("FromSysDate");
                            ttb
                                .HasPeriodEnd("ToSysDateShadow")
                                .HasColumnName("ToSysDate");
                        }
                    ));
                });

            modelBuilder.Entity("ProductClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductClasses", (string)null);
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(112);

                    b.HasKey("Id");

                    b.HasIndex("ProductClassId");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.HasOne("ProductClass", "ProductClass")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductClass");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProductClass", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
